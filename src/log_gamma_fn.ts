import { LOG_SQRT_2PI } from "./constants";

// adapted from
// https://www.netlib.org/specfun/algama
// on 2025-01-28

export function log_gamma(x: number): number {
  // Constants
  const PNT68 = 0.6796875,
    XBIG = 2.55e305,
    FRTBIG = 2.25e76;

  // Rational approximation coefficients
  const D1 = -5.772156649015328605195174e-1;
  const D2 = 4.227843350984671393993777e-1;
  const D4 = 1.791759469228055000094023;

  const P1 = [
    4.945235359296727046734888, 2.018112620856775083915565e2,
    2.290838373831346393026739e3, 1.131967205903380828685045e4,
    2.855724635671635335736389e4, 3.848496228443793359990269e4,
    2.637748787624195437963534e4, 7.225813979700288197698961e3,
  ];

  const Q1 = [
    6.748212550303777196073036e1, 1.113332393857199323513008e3,
    7.738757056935398733233834e3, 2.763987074403340708898585e4,
    5.499310206226157329794414e4, 6.161122180066002127833352e4,
    3.635127591501940507276287e4, 8.785536302431013170870835e3,
  ];

  const P2 = [
    4.974607845568932035012064, 5.424138599891070494101986e2,
    1.550693864978364947665077e4, 1.847932904445632425417223e5,
    1.08820476946882876749847e6, 3.338152967987029735917223e6,
    5.106661678927352456275255e6, 3.074109054850539556250927e6,
  ];

  const Q2 = [
    1.830328399370592604055942e2, 7.765049321445005871323047e3,
    1.331903827966074194402448e5, 1.136705821321969608938755e6,
    5.267964117437946917577538e6, 1.346701454311101692290052e7,
    1.782736530353274213975932e7, 9.533095591844353613395747e6,
  ];

  const P4 = [
    1.474502166059939948905062e4, 2.426813369486704502836312e6,
    1.214755574045093227939592e8, 2.663432449630976949898078e9,
    2.940378956634553899906876e10, 1.702665737765398868392998e11,
    4.92612579337743088758812e11, 5.606251856223951465078242e11,
  ];

  const Q4 = [
    2.690530175870899333379843e3, 6.393885654300092398984238e5,
    4.135599930241388052042842e7, 1.12087210961614794137657e9,
    1.488613728678813811542398e10, 1.016803586272438228077304e11,
    3.417476345507377132798597e11, 4.463158187419713286462081e11,
  ];

  const C = [
    -1.910444077728e-3, 8.4171387781295e-4, -5.952379913043012e-4,
    7.93650793500350248e-4, -2.777777777777681622553e-3,
    8.333333333333333331554247e-2, 5.7083835261e-3,
  ];

  let res, corr, xm1, xm2, xm4, xnum, xden, y, i, ysq;
  y = x;

  if (y > 0 && y <= XBIG) {
    if (y <= Number.EPSILON) {
      res = -Math.log(y);
    } else if (y <= 1.5) {
      if (y < PNT68) {
        corr = -Math.log(y);
        xm1 = y;
      } else {
        corr = 0;
        xm1 = y - 0.5 - 0.5;
      }

      if (y <= 0.5 || y >= PNT68) {
        xnum = 0;
        xden = 1;
        for (i = 0; i < 8; i++) {
          xnum = xnum * xm1 + P1[i];
          xden = xden * xm1 + Q1[i];
        }
        res = corr + xm1 * (D1 + xm1 * (xnum / xden));
      } else {
        xm2 = y - 0.5 - 0.5;
        xnum = 0;
        xden = 1;
        for (i = 0; i < 8; i++) {
          xnum = xnum * xm2 + P2[i];
          xden = xden * xm2 + Q2[i];
        }
        res = corr + xm2 * (D2 + xm2 * (xnum / xden));
      }
    } else if (y <= 4) {
      xm2 = y - 2;
      xnum = 0.0;
      xden = 1.0;
      for (i = 0; i < 8; i++) {
        xnum = xnum * xm2 + P2[i];
        xden = xden * xm2 + Q2[i];
      }
      res = xm2 * (D2 + xm2 * (xnum / xden));
    } else if (y <= 12) {
      xm4 = y - 4;
      xnum = 0.0;
      xden = -1.0;
      for (i = 0; i < 8; i++) {
        xnum = xnum * xm4 + P4[i];
        xden = xden * xm4 + Q4[i];
      }
      res = D4 + xm4 * (xnum / xden);
    } else {
      res = 0;
      if (y <= FRTBIG) {
        res = C[6];
        ysq = y * y;
        for (i = 0; i < 6; ++i) {
          res = res / ysq + C[i];
        }
        res = res / y;
        corr = Math.log(y);
        res = res + LOG_SQRT_2PI - 0.5 * corr;
        // EAR they call this SQRTPI, in the source above
        // but I'm pretty sure it should be
        // log(sqrt(2pi))
        // if for nothing else than based on the value they use
        res = res + y * (corr - 1);
      }
    }
  } else {
    res = Number.MAX_VALUE;
  }
  return res;
}
